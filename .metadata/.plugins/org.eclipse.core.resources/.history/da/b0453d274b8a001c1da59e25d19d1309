package graph;
import java.util.LinkedList;
import java.util.List;

public class Graph {
	
	LinkedList<Node> adjList[] = new LinkedList()[2];
	
	public Graph(List<Edge> edges) {
		adjList = new LinkedList<Graph.Node>();
		for(int i = 0; i <edges.size(); i++)
			adjList[i] = new LinkedList<Node>();
		
		for(Edge edge : edges) {
			adjList[edge.source].add(new Node(edge.destination, edge.weight));
		}
	}
	
	static class Node{
		int destination;
		int weight;
		
		Node(int destination, int weight) {
			this.destination = destination;
			this.weight = weight;
		}
	}
	
	public void print() {
		int sourceVertex = 0;
		int numberOfVertices = adjList.length;
		while(sourceVertex < numberOfVertices) {
			for(Node node : adjList[sourceVertex]) {
				System.out.print("Vertex:" + sourceVertex + " ==> " + node.destination + " (" + node.weight + ")\t");
			}
		}
	}
}

class Edge {
	int source;
	int destination;
	int weight;
	
	private static final int DEFAULT_WEIGHT = -1;
	public Edge(int source, int destination, int weight) {
		this.source = source;
		this.destination = destination;
		this.weight = weight;
	}
	
	public Edge(int source, int destination) {
		this(source, destination, DEFAULT_WEIGHT);
	}
}
