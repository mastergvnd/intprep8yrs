package arrays;

import java.util.Arrays;

import org.junit.Assert;

public class _1LargestSumContiguousCircularSubarray {

	public static void main(String[] args) {
		Assert.assertEquals("Not correct output", 6, printLargestSumContiguousSubarray(new int[]{-2,1,-3,4,-1,2,1,-5,4}));
		Assert.assertEquals("Not correct output", 1, printLargestSumContiguousSubarray(new int[]{1}));
		Assert.assertEquals("Not correct output", 23, printLargestSumContiguousSubarray(new int[]{5,4,-1,7,8}));
		Assert.assertEquals("Not correct output", -1, printLargestSumContiguousSubarray(new int[]{-1}));
		Assert.assertEquals("Not correct output", 0, printLargestSumContiguousSubarray(new int[]{0}));
		Assert.assertEquals("Not correct output", -1, printLargestSumContiguousSubarray(new int[]{-2,-1}));
		Assert.assertEquals("Not correct output", 0, printLargestSumContiguousSubarray(new int[]{-1,0}));
	}
	
	private static int printLargestSumContiguousSubarray(int[] nums) {
		if(nums.length == 1 && (nums[0] == -1 || nums[0] == 0))
            return nums[0];
		
		int maxSoFar = nums[0], currentMax = 0, minSoFar = nums[0], currentMin = nums[0];
		for(int i=0; i<nums.length; i++) {
			currentMax = Math.max(currentMax, currentMax + nums[i]);
			maxSoFar = Math.max(maxSoFar, currentMax);
		}
		return maxSoFar;
	}

}
