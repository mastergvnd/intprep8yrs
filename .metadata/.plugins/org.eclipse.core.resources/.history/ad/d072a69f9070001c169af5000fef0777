package paypal;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.PriorityQueue;

import org.junit.Assert;

public class _B25ReconstructItinerary {

	public static void main(String[] args) {
		List<List<String>> tickets = new ArrayList<List<String>>();
		tickets.add(new ArrayList(Arrays.asList("Chennai", "Banglore")));
		tickets.add(new ArrayList(Arrays.asList("Bombay", "Delhi")));
		tickets.add(new ArrayList(Arrays.asList("Goa", "Chennai")));
		tickets.add(new ArrayList(Arrays.asList("Delhi", "Goa")));
		Assert.assertEquals(new ArrayList(Arrays.asList("Bombay", "Delhi", "Goa", "Chennai", "Banglore")), findItinerary(tickets));
	
		tickets = new ArrayList<List<String>>();
		tickets.add(new ArrayList(Arrays.asList("JFK_NY", "SFO")));
		tickets.add(new ArrayList(Arrays.asList("JFK_NY", "ATL_GA")));
		tickets.add(new ArrayList(Arrays.asList("SFO", "ATL_GA")));
		tickets.add(new ArrayList(Arrays.asList("ATL_GA", "JFK_NY")));
		tickets.add(new ArrayList(Arrays.asList("ATL_GA", "SFO")));
		Assert.assertEquals(new ArrayList<>(Arrays.asList("JFK_NY", "SFO", "ATL_GA", "JFK_NY", "ATL_GA", "SFO")), findItinerary(tickets));
	}

	public static List<String> findItinerary(List<List<String>> tickets) {
		List<String> result = new ArrayList<String>();
		if(tickets.size() == 0)
			return result;
		Map<String, List<String>> itinerary = new HashMap<String, List<String>>();
		for(List<String> ticket : tickets) {
			List<String> destinations = itinerary.getOrDefault(ticket.get(0), new ArrayList<String>());
			destinations.add(ticket.get(1));
			itinerary.put(ticket.get(0), destinations);
		}
		String start = null;
		for(Map.Entry<String, List<String>> entry : itinerary.entrySet()) {
			if(isValidStart(itinerary, entry.getKey()))
				start = entry.getKey();
			
		}
		if(start == null)
			start = tickets.get(0).get(0);
		System.out.println(start);
		int i = 0;
		while(start != null && i++ <10) {
			result.add(start);
			List<String> destinations = itinerary.get(start);
			String temp = null;
			if(destinations != null && destinations.size() > 0) {
				temp = destinations.remove(0);
				itinerary.put(start, destinations);
			} 
			start = temp;
		}
		return result;
	}

	private static boolean isValidStart(Map<String, List<String>> itinerary, String key) {
		boolean isValid = false;
		for(List<String> list : itinerary.values()) {
			isValid = list.contains(key)
		}
		return isValid;
	}

}
