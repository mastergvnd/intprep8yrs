package com.essbase.japi;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import com.essbase.api.base.EssException;
import com.essbase.api.base.IEssBaseObject;
import com.essbase.api.metadata.IEssCubeOutline;
import com.essbase.api.metadata.IEssDimension;
import com.essbase.api.metadata.IEssMember;

public class EssBaseUtil {
	
	public static void printNullSubMembers(IEssMember sMember, IEssMember tMember, int sIndentation, int tIndentation) throws EssException, IOException {
		IEssBaseObject[] members = null;
		if(sMember != null){
			members = sMember.getChildMembers().getAll();
			for(int i = 0; i<members.length; i++){
				IEssMember subMember = (IEssMember) members[i];
				//System.out.println(alignment+subMember.getName());
				Writer.write(subMember.getName(), "", sIndentation+2, 0);
				printNullSubMembers(subMember, null, sIndentation+2, tIndentation);
			}
		}
		else{
			members = tMember.getChildMembers().getAll();
			for(int i = 0; i<members.length; i++){
				IEssMember subMember = (IEssMember) members[i];
				//System.out.println(alignment+subMember.getName());
				Writer.write(null, subMember.getName(), sIndentation, tIndentation+2);
				printNullSubMembers(null, subMember, sIndentation, tIndentation+2);
			}
		}
	}

	public static List<IEssDimension> readDimensionsAsList(IEssCubeOutline cubeOutLine) throws EssException{
		List<IEssDimension> dimenionsList = new ArrayList<IEssDimension>();
		IEssBaseObject[] dimensions = cubeOutLine.getDimensions().getAll();
		for(int i = 0; i<dimensions.length; i++){
			IEssDimension dimension = (IEssDimension) dimensions[i];
			dimenionsList.add(dimension);
		}
		return dimenionsList;
	}
	
	public static Map<String, IEssDimension> readDimensionsAsMap(IEssCubeOutline cubeOutLine) throws EssException{
		Map<String, IEssDimension> dimenionsList = new LinkedHashMap<String, IEssDimension>();
		IEssBaseObject[] dimensions = cubeOutLine.getDimensions().getAll();
		for(int i = 0; i<dimensions.length; i++){
			IEssDimension dimension = (IEssDimension) dimensions[i];
			dimenionsList.put(dimension.getName(), dimension);
		}
		return dimenionsList;
	}

	public static void cubeComparator(EssBaseCube sourceCube, EssBaseCube targetCube) throws EssException, IOException {
		Map<String, IEssDimension> sourceDimensinMap = readDimensionsAsMap(sourceCube.getCubeOutline());
		Map<String, IEssDimension> targetDimensinMap = readDimensionsAsMap(targetCube.getCubeOutline());
		Writer.write("Source Cube Name : "+sourceCube.getCubeName(), Writer.NEW_LINE);
		//writer.append("Source Cube Name : "+sourceCube.getCubeName()+System.lineSeparator());
		//writer.append("Target Cube Name : "+targetCube.getCubeName()+System.lineSeparator());
		Writer.write("Target Cube Name : "+targetCube.getCubeName(), Writer.NEW_LINE);
		findDimensionDifferences(sourceDimensinMap, targetDimensinMap);
	}
	
	public static Map<String, String> readDimensionProperties(IEssDimension dimension) throws EssException {
		Map<String, String> propertyMap = new HashMap<String, String>();
		String[] propertyNames = dimension.getPropertyNames();
		for (String property : propertyNames)
			propertyMap.put(property, dimension.getPropertyValueAny(property).toString());
		return propertyMap;
	}
	
	private static void checkforDimensionProperties(IEssDimension sDimension, IEssDimension tDimension) throws EssException, IOException {
		Map<String, String> sdProperty = readDimensionProperties(sDimension);
		Map<String, String> tdProperty = readDimensionProperties(tDimension);
		for(String dName : sdProperty.keySet()){
			if(tdProperty.containsKey(dName) && !sdProperty.get(dName).equals(tdProperty.get(dName))){
				//writer.append("Dimension Property is not matching,"+dName+","+sdProperty.get(dName)+","+tdProperty.get(dName)+System.lineSeparator());
				Writer.write("Dimension Property is not matching,"+dName+","+sdProperty.get(dName)+","+tdProperty.get(dName), Writer.NEW_LINE);
			}
		}
	}

	private static void findDimensionDifferences(Map<String, IEssDimension> sDimensionMap,
			Map<String, IEssDimension> tDimensionMap) throws EssException, IOException {
		System.out.println("Number of dimensions in source cube: " + sDimensionMap.size());
		System.out.println("Number of dimensions in target cube: " + tDimensionMap.size());	
		Writer.write("Number of dimensions in source cube: "+sDimensionMap.size(), Writer.NEW_LINE);
		Writer.write("Number of dimensions in target cube: "+tDimensionMap.size(), Writer.NEW_LINE);
		//writer.append("Number of dimensions in source cube: "+sDimensionMap.size()+System.lineSeparator());
		//writer.append("Number of dimensions in target cube: "+tDimensionMap.size()+System.lineSeparator());
		for(String dName : sDimensionMap.keySet()){
			if(tDimensionMap.containsKey(dName)){
				checkforDimensionProperties(sDimensionMap.get(dName), tDimensionMap.get(dName));
			}else{
				Writer.write("Dimension is missing in target cube,"+dName, Writer.NEW_LINE);
				//writer.append("Dimension is missing in target cube,"+dName+System.lineSeparator());
			}
		}
		print(sDimensionMap, tDimensionMap);
	}
	
	private static void printNullMembers(List<IEssDimension> sDimensionsList, List<IEssDimension> tDimensionsList, int sIndentation, int tIndentation) throws IOException, EssException{
		if(sDimensionsList == null){
			for(IEssDimension dimention : tDimensionsList){
				Writer.write(null, dimention.getName(), sIndentation, tIndentation+2);
				IEssBaseObject[] tMembers = dimention.getDimensionRootMember().getChildMembers().getAll();
				for(int j = 0; j<tMembers.length; j++){
					IEssMember tMember = (IEssMember) tMembers[j];
					//System.out.println("\t"+sMember.getName()+"\t\t\t\t\t"+tMember.getName());
					Writer.write(null, tMember.getName(), sIndentation, tIndentation+2);
					printSubmembers(null, tMember, sIndentation+2, tIndentation+2);
				}
			}
		}else{
			for(IEssDimension dimention : sDimensionsList){
				Writer.write(dimention.getName(), null, sIndentation+2, tIndentation);
				IEssBaseObject[] sMembers = dimention.getDimensionRootMember().getChildMembers().getAll();
				for(int j = 0; j<sMembers.length; j++){
					IEssMember sMember = (IEssMember) sMembers[j];
					//System.out.println("\t"+sMember.getName()+"\t\t\t\t\t"+tMember.getName());
					Writer.write(sMember.getName(), null, sIndentation+2, tIndentation);
					printSubmembers(sMember, null, sIndentation+2, tIndentation);
				}
			}
		}
	}
	
	public static void printSubmembers(IEssMember sMember, IEssMember tMember,int sIndentation, int tIndentation) throws EssException, IOException {
		IEssBaseObject[] sMembers = sMember.getChildMembers().getAll();
		IEssBaseObject[] tMembers = tMember.getChildMembers().getAll();
		int subMemLength = sMembers.length < tMembers.length ? sMembers.length : tMembers.length;
		for(int i = 0; i<subMemLength; i++){
			IEssMember sSubMember = (IEssMember) sMembers[i];
			IEssMember tSubMember = (IEssMember) tMembers[i];
//			System.out.println(alignment1+sSubMember.getName()+alignment2+tSubMember.getName());
			Writer.write(sSubMember.getName(), tSubMember.getName(), sIndentation+2, tIndentation+2);
			printSubmembers(tSubMember, tSubMember, sIndentation+2, tIndentation+2);
		}
		if(sMembers.length < tMembers.length)
			printNullSubMembers(null, tMember, 0, tIndentation+2);
		else if(sMembers.length > tMembers.length)
			printNullSubMembers(sMember, null, sIndentation+2, 0);
	}
	
	public static void printMembers(List<IEssDimension> sDimensionsList, List<IEssDimension> tDimensionsList) throws EssException, IOException {
		int memLength = sDimensionsList.size() < tDimensionsList.size() ? sDimensionsList.size() : tDimensionsList.size();
		int i;
		int sIndentation =0;
		int tIndentation =36;
		for(i = 0; i<memLength ; i++){
			IEssBaseObject[] sMembers = sDimensionsList.get(i).getDimensionRootMember().getChildMembers().getAll();
			IEssBaseObject[] tMembers = tDimensionsList.get(i).getDimensionRootMember().getChildMembers().getAll();
			int subMemLength = sMembers.length > tMembers.length ? sMembers.length : tMembers.length;
			System.out.println(sDimensionsList.get(i).getName()+"\t\t\t\t"+tDimensionsList.get(i).getName());
			Writer.write(sDimensionsList.get(i).getName(), tDimensionsList.get(i).getName(), sIndentation, tIndentation);
			for(int j = 0; j<subMemLength; j++){
				IEssMember sMember = (IEssMember) sMembers[j];
				IEssMember tMember = (IEssMember) tMembers[j];
				System.out.println("\t"+sMember.getName()+"\t\t\t\t\t"+tMember.getName());
				Writer.write(sMember.getName(), tMember.getName(), sIndentation+2, tIndentation+2);
				printSubmembers(sMember, tMember, sIndentation+2, tIndentation+2);
			}
			sDimensionsList.remove(i);
			tDimensionsList.remove(i);
		}
		if(sDimensionsList.size() < tDimensionsList.size())
			printNullMembers(null , tDimensionsList, sIndentation, tIndentation);
		else if (sDimensionsList.size() > tDimensionsList.size())
			printNullMembers(sDimensionsList, null, sIndentation, tIndentation);
	}

	private static void print(Map<String, IEssDimension> sDimensionMap, Map<String, IEssDimension> tDimensionMap) throws EssException, IOException {
		List<IEssDimension> sList = new ArrayList<IEssDimension>(sDimensionMap.values());
		List<IEssDimension> tList = new ArrayList<IEssDimension>(tDimensionMap.values());
		printMembers(sList, tList);
	}
}